# Author: Viacheslav Lotsmanov
# License: MIT https://raw.githubusercontent.com/unclechu/neovimrc/master/LICENSE
priority -50



snippet f "Function" w
-> ${1}
endsnippet
snippet cf "Curried function" w
--> ${1}
endsnippet
snippet fc "Function (keep context)" w
~> ${1}
endsnippet
snippet cfc "Curried function (keep context)" w
~~> ${1}
endsnippet

snippet fb "Backward function" w
<- ${1}
endsnippet
snippet cfb "Curried backward function" w
<-- ${1}
endsnippet
snippet fbc "Backward function (keep context)" w
<~ ${1}
endsnippet
snippet cfbc "Curried backward function (keep context)" w
<~~ ${1}
endsnippet


snippet fa "Function with named agruments" w
(${1:foo})-> ${2}
endsnippet
snippet cfa "Curried function with named agruments" w
(${1:foo})--> ${2}
endsnippet
snippet fac "Function with named agruments (keep context)" w
(${1:foo})~> ${2}
endsnippet
snippet cfac "Curried function with named agruments (keep context)" w
(${1:foo})~~> ${2}
endsnippet

snippet fab "Backward function with named agruments" w
${1:foo} <- ${2}
endsnippet
snippet cfab "Curried backward function with named agruments" w
${1:foo} <-- ${2}
endsnippet
snippet fabc "Backward function with named agruments (keep context)" w
${1:foo} <~ ${2}
endsnippet
snippet cfabc "Curried backward function with named agruments (keep context)" w
${1:foo} <~~ ${2}
endsnippet


snippet p "Procedure" w
!-> ${1}
endsnippet
snippet cp "Curried procedure" w
!--> ${1}
endsnippet
snippet pc "Procedure (keep context)" w
!~> ${1}
endsnippet
snippet cpc "Curried procedure (keep context)" w
!~~> ${1}
endsnippet

snippet pb "Backward procedure" w
<-! ${1}
endsnippet
snippet cpb "Curried backward procedure" w
<--! ${1}
endsnippet
snippet pbc "Backward procedure (keep context)" w
<~! ${1}
endsnippet
snippet cpbc "Curried backward procedure (keep context)" w
<~~! ${1}
endsnippet


snippet pa "Procedure with named agruments" w
(${1:foo})!-> ${2}
endsnippet
snippet cpa "Curried procedure with named agruments" w
(${1:foo})!--> ${2}
endsnippet
snippet pac "Procedure with named agruments (keep context)" w
(${1:foo})!~> ${2}
endsnippet
snippet cpac "Curried procedure with named agruments (keep context)" w
(${1:foo})!~~> ${2}
endsnippet

snippet pab "Backward procedure with named agruments" w
${1:foo} <-! ${2}
endsnippet
snippet cpab "Curried backward procedure with named agruments" w
${1:foo} <--! ${2}
endsnippet
snippet pabc "Backward procedure with named agruments (keep context)" w
${1:foo} <~! ${2}
endsnippet
snippet cpabc "Curried backward procedure with named agruments (keep context)" w
${1:foo} <~~! ${2}
endsnippet



snippet c "Constant definition" b
const ${1:foo} = ${2}
endsnippet

snippet c- "Constant prefix" b
const ${2}
endsnippet

snippet rq "require!" b
require! {
	${1:foo}
}${2}
endsnippet


snippet ok "Get keys list of hash" i
Object.keys ${1:foo}
endsnippet

snippet oc "Create hash" i
Object.create ${1:null}
endsnippet

snippet ofz "Create expanded frozen hash" i
Object.freeze do
	${1:foo}: ${2:\bar}
endsnippet

snippet ofz- "Create frozen hash" i
Object.freeze ${1:\{\}}
endsnippet

snippet oa "Hash assign" i
Object.assign ${1:foo}, ${2:bar}
endsnippet

snippet oac "Clone hash" i
Object.assign {}, ${1:foo}
endsnippet


snippet isa "Check if it's array" i
Array.is-array ${1:foo}
endsnippet

snippet io "Something is instance of something" i
${1} instanceof ${2:Object}
endsnippet

snippet io- "Something instance of" i
instanceof ${2}
endsnippet

snippet dn "Current unix-time seconds" i
do Date.now
endsnippet

snippet nd "New instance of Date object" i
new Date
endsnippet

snippet ne "New exception instance" i
new Error '${1:foo}'${2}
endsnippet

snippet te "Throw new exception instance" i
throw new Error '${1:foo}'${2}
endsnippet

snippet tt "Throw something" i
throw ${1}
endsnippet

snippet dg "Call debugger" i
debugger
endsnippet

snippet cl "console.log" i
console.log ${1:foo}
endsnippet

snippet ci "console.info" i
console.info ${1:foo}
endsnippet

snippet cw "console.warn" i
console.warn ${1:foo}
endsnippet

snippet ce "console.error" i
console.error ${1:foo}
endsnippet

snippet cd "console.debug" i
console.debug ${1:foo}
endsnippet

snippet cg "console.group" i
console.group '${1:foo}'${2}
endsnippet

snippet cge "console.groupEnd" i
console.group-end '${1:foo}'${2}
endsnippet

snippet ct "console.time (benchmark)" i
console.time '${1:foo}'${2}
endsnippet

snippet cte "console.timeEnd (benchmark)" i
console.time-end '${1:foo}'${2}
endsnippet

snippet clp "console.profile" i
console.profile '${1:foo}'${2}
endsnippet

snippet clpe "console.profileEnd" i
console.profile-end '${1:foo}'${2}
endsnippet

snippet ca "console.assert" i
console.assert ${1:foo}, '${2:bar}'${3}
endsnippet

snippet ! "Inverted boolean value" i
not ${1}
endsnippet

snippet // "JSDoc comment" i
/**
 * ${1:Description.}
 *
 * @${2:public}
 */
endsnippet

snippet try "try/catch" i
try
	${1:foo}
catch
	${2:console.error e}
endsnippet
